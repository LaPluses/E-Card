// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cards.proto

#ifndef PROTOBUF_Cards_2eproto__INCLUDED
#define PROTOBUF_Cards_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ECarD {
class Card;
class CardDefaultTypeInternal;
extern CardDefaultTypeInternal _Card_default_instance_;
class Cards;
class CardsDefaultTypeInternal;
extern CardsDefaultTypeInternal _Cards_default_instance_;
}  // namespace ECarD

namespace ECarD {

namespace protobuf_Cards_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Cards_2eproto

enum CardType {
  IDCard = 1,
  DriverCard = 2,
  StudentCard = 3,
  SocialSecurityCard = 4,
  DisabledCard = 5
};
bool CardType_IsValid(int value);
const CardType CardType_MIN = IDCard;
const CardType CardType_MAX = DisabledCard;
const int CardType_ARRAYSIZE = CardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CardType_descriptor();
inline const ::std::string& CardType_Name(CardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CardType_descriptor(), value);
}
inline bool CardType_Parse(
    const ::std::string& name, CardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CardType>(
    CardType_descriptor(), name, value);
}
// ===================================================================

class Card : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ECarD.Card) */ {
 public:
  Card();
  virtual ~Card();

  Card(const Card& from);

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Card& default_instance();

  static inline const Card* internal_default_instance() {
    return reinterpret_cast<const Card*>(
               &_Card_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Card* other);

  // implements Message ----------------------------------------------

  inline Card* New() const PROTOBUF_FINAL { return New(NULL); }

  Card* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Card* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string fields = 3;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 3;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fields(int index, ::std::string&& value);
  #endif
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_fields(::std::string&& value);
  #endif
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fields();

  // required bytes image = 4;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 4;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // optional int32 cardID = 1;
  bool has_cardid() const;
  void clear_cardid();
  static const int kCardIDFieldNumber = 1;
  ::google::protobuf::int32 cardid() const;
  void set_cardid(::google::protobuf::int32 value);

  // optional int32 checkflag = 5;
  bool has_checkflag() const;
  void clear_checkflag();
  static const int kCheckflagFieldNumber = 5;
  ::google::protobuf::int32 checkflag() const;
  void set_checkflag(::google::protobuf::int32 value);

  // required .ECarD.CardType cardType = 2;
  bool has_cardtype() const;
  void clear_cardtype();
  static const int kCardTypeFieldNumber = 2;
  ::ECarD::CardType cardtype() const;
  void set_cardtype(::ECarD::CardType value);

  // @@protoc_insertion_point(class_scope:ECarD.Card)
 private:
  void set_has_cardid();
  void clear_has_cardid();
  void set_has_cardtype();
  void clear_has_cardtype();
  void set_has_image();
  void clear_has_image();
  void set_has_checkflag();
  void clear_has_checkflag();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fields_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::google::protobuf::int32 cardid_;
  ::google::protobuf::int32 checkflag_;
  int cardtype_;
  friend struct protobuf_Cards_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Cards : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ECarD.Cards) */ {
 public:
  Cards();
  virtual ~Cards();

  Cards(const Cards& from);

  inline Cards& operator=(const Cards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cards& default_instance();

  static inline const Cards* internal_default_instance() {
    return reinterpret_cast<const Cards*>(
               &_Cards_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Cards* other);

  // implements Message ----------------------------------------------

  inline Cards* New() const PROTOBUF_FINAL { return New(NULL); }

  Cards* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cards& from);
  void MergeFrom(const Cards& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cards* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ECarD.Card cards = 1;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 1;
  const ::ECarD::Card& cards(int index) const;
  ::ECarD::Card* mutable_cards(int index);
  ::ECarD::Card* add_cards();
  ::google::protobuf::RepeatedPtrField< ::ECarD::Card >*
      mutable_cards();
  const ::google::protobuf::RepeatedPtrField< ::ECarD::Card >&
      cards() const;

  // @@protoc_insertion_point(class_scope:ECarD.Cards)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ECarD::Card > cards_;
  friend struct protobuf_Cards_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Card

// optional int32 cardID = 1;
inline bool Card::has_cardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Card::set_has_cardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Card::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Card::clear_cardid() {
  cardid_ = 0;
  clear_has_cardid();
}
inline ::google::protobuf::int32 Card::cardid() const {
  // @@protoc_insertion_point(field_get:ECarD.Card.cardID)
  return cardid_;
}
inline void Card::set_cardid(::google::protobuf::int32 value) {
  set_has_cardid();
  cardid_ = value;
  // @@protoc_insertion_point(field_set:ECarD.Card.cardID)
}

// required .ECarD.CardType cardType = 2;
inline bool Card::has_cardtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Card::set_has_cardtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Card::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Card::clear_cardtype() {
  cardtype_ = 1;
  clear_has_cardtype();
}
inline ::ECarD::CardType Card::cardtype() const {
  // @@protoc_insertion_point(field_get:ECarD.Card.cardType)
  return static_cast< ::ECarD::CardType >(cardtype_);
}
inline void Card::set_cardtype(::ECarD::CardType value) {
  assert(::ECarD::CardType_IsValid(value));
  set_has_cardtype();
  cardtype_ = value;
  // @@protoc_insertion_point(field_set:ECarD.Card.cardType)
}

// repeated string fields = 3;
inline int Card::fields_size() const {
  return fields_.size();
}
inline void Card::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& Card::fields(int index) const {
  // @@protoc_insertion_point(field_get:ECarD.Card.fields)
  return fields_.Get(index);
}
inline ::std::string* Card::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:ECarD.Card.fields)
  return fields_.Mutable(index);
}
inline void Card::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ECarD.Card.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Card::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ECarD.Card.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Card::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ECarD.Card.fields)
}
inline void Card::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ECarD.Card.fields)
}
inline ::std::string* Card::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:ECarD.Card.fields)
  return fields_.Add();
}
inline void Card::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ECarD.Card.fields)
}
#if LANG_CXX11
inline void Card::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ECarD.Card.fields)
}
#endif
inline void Card::add_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ECarD.Card.fields)
}
inline void Card::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ECarD.Card.fields)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Card::fields() const {
  // @@protoc_insertion_point(field_list:ECarD.Card.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Card::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:ECarD.Card.fields)
  return &fields_;
}

// required bytes image = 4;
inline bool Card::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Card::set_has_image() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Card::clear_has_image() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Card::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image();
}
inline const ::std::string& Card::image() const {
  // @@protoc_insertion_point(field_get:ECarD.Card.image)
  return image_.GetNoArena();
}
inline void Card::set_image(const ::std::string& value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ECarD.Card.image)
}
#if LANG_CXX11
inline void Card::set_image(::std::string&& value) {
  set_has_image();
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ECarD.Card.image)
}
#endif
inline void Card::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ECarD.Card.image)
}
inline void Card::set_image(const void* value, size_t size) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ECarD.Card.image)
}
inline ::std::string* Card::mutable_image() {
  set_has_image();
  // @@protoc_insertion_point(field_mutable:ECarD.Card.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_image() {
  // @@protoc_insertion_point(field_release:ECarD.Card.image)
  clear_has_image();
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    set_has_image();
  } else {
    clear_has_image();
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:ECarD.Card.image)
}

// optional int32 checkflag = 5;
inline bool Card::has_checkflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Card::set_has_checkflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Card::clear_has_checkflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Card::clear_checkflag() {
  checkflag_ = 0;
  clear_has_checkflag();
}
inline ::google::protobuf::int32 Card::checkflag() const {
  // @@protoc_insertion_point(field_get:ECarD.Card.checkflag)
  return checkflag_;
}
inline void Card::set_checkflag(::google::protobuf::int32 value) {
  set_has_checkflag();
  checkflag_ = value;
  // @@protoc_insertion_point(field_set:ECarD.Card.checkflag)
}

// -------------------------------------------------------------------

// Cards

// repeated .ECarD.Card cards = 1;
inline int Cards::cards_size() const {
  return cards_.size();
}
inline void Cards::clear_cards() {
  cards_.Clear();
}
inline const ::ECarD::Card& Cards::cards(int index) const {
  // @@protoc_insertion_point(field_get:ECarD.Cards.cards)
  return cards_.Get(index);
}
inline ::ECarD::Card* Cards::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:ECarD.Cards.cards)
  return cards_.Mutable(index);
}
inline ::ECarD::Card* Cards::add_cards() {
  // @@protoc_insertion_point(field_add:ECarD.Cards.cards)
  return cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ECarD::Card >*
Cards::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:ECarD.Cards.cards)
  return &cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ECarD::Card >&
Cards::cards() const {
  // @@protoc_insertion_point(field_list:ECarD.Cards.cards)
  return cards_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace ECarD

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ECarD::CardType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ECarD::CardType>() {
  return ::ECarD::CardType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Cards_2eproto__INCLUDED
