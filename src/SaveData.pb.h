// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SaveData.proto

#ifndef PROTOBUF_SaveData_2eproto__INCLUDED
#define PROTOBUF_SaveData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class Card;
class CardDefaultTypeInternal;
extern CardDefaultTypeInternal _Card_default_instance_;
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class SaveData;
class SaveDataDefaultTypeInternal;
extern SaveDataDefaultTypeInternal _SaveData_default_instance_;

namespace protobuf_SaveData_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_SaveData_2eproto

enum Card_CardType {
  Card_CardType_IDCard = 1,
  Card_CardType_DriverCard = 2,
  Card_CardType_StudentCard = 3,
  Card_CardType_SocialSecurityCard = 4,
  Card_CardType_DisabledCard = 5
};
bool Card_CardType_IsValid(int value);
const Card_CardType Card_CardType_CardType_MIN = Card_CardType_IDCard;
const Card_CardType Card_CardType_CardType_MAX = Card_CardType_DisabledCard;
const int Card_CardType_CardType_ARRAYSIZE = Card_CardType_CardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Card_CardType_descriptor();
inline const ::std::string& Card_CardType_Name(Card_CardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Card_CardType_descriptor(), value);
}
inline bool Card_CardType_Parse(
    const ::std::string& name, Card_CardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Card_CardType>(
    Card_CardType_descriptor(), name, value);
}
// ===================================================================

class Card : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Card) */ {
 public:
  Card();
  virtual ~Card();

  Card(const Card& from);

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Card& default_instance();

  static inline const Card* internal_default_instance() {
    return reinterpret_cast<const Card*>(
               &_Card_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Card* other);

  // implements Message ----------------------------------------------

  inline Card* New() const PROTOBUF_FINAL { return New(NULL); }

  Card* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Card* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Card_CardType CardType;
  static const CardType IDCard =
    Card_CardType_IDCard;
  static const CardType DriverCard =
    Card_CardType_DriverCard;
  static const CardType StudentCard =
    Card_CardType_StudentCard;
  static const CardType SocialSecurityCard =
    Card_CardType_SocialSecurityCard;
  static const CardType DisabledCard =
    Card_CardType_DisabledCard;
  static inline bool CardType_IsValid(int value) {
    return Card_CardType_IsValid(value);
  }
  static const CardType CardType_MIN =
    Card_CardType_CardType_MIN;
  static const CardType CardType_MAX =
    Card_CardType_CardType_MAX;
  static const int CardType_ARRAYSIZE =
    Card_CardType_CardType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CardType_descriptor() {
    return Card_CardType_descriptor();
  }
  static inline const ::std::string& CardType_Name(CardType value) {
    return Card_CardType_Name(value);
  }
  static inline bool CardType_Parse(const ::std::string& name,
      CardType* value) {
    return Card_CardType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string fields = 3;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 3;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fields(int index, ::std::string&& value);
  #endif
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_fields(::std::string&& value);
  #endif
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fields();

  // optional bytes CardData = 2;
  bool has_carddata() const;
  void clear_carddata();
  static const int kCardDataFieldNumber = 2;
  const ::std::string& carddata() const;
  void set_carddata(const ::std::string& value);
  #if LANG_CXX11
  void set_carddata(::std::string&& value);
  #endif
  void set_carddata(const char* value);
  void set_carddata(const void* value, size_t size);
  ::std::string* mutable_carddata();
  ::std::string* release_carddata();
  void set_allocated_carddata(::std::string* carddata);

  // optional int32 CardID = 1;
  bool has_cardid() const;
  void clear_cardid();
  static const int kCardIDFieldNumber = 1;
  ::google::protobuf::int32 cardid() const;
  void set_cardid(::google::protobuf::int32 value);

  // optional int32 CardIndex = 4;
  bool has_cardindex() const;
  void clear_cardindex();
  static const int kCardIndexFieldNumber = 4;
  ::google::protobuf::int32 cardindex() const;
  void set_cardindex(::google::protobuf::int32 value);

  // optional int32 checkflag = 5;
  bool has_checkflag() const;
  void clear_checkflag();
  static const int kCheckflagFieldNumber = 5;
  ::google::protobuf::int32 checkflag() const;
  void set_checkflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Card)
 private:
  void set_has_cardid();
  void clear_has_cardid();
  void set_has_carddata();
  void clear_has_carddata();
  void set_has_cardindex();
  void clear_has_cardindex();
  void set_has_checkflag();
  void clear_has_checkflag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fields_;
  ::google::protobuf::internal::ArenaStringPtr carddata_;
  ::google::protobuf::int32 cardid_;
  ::google::protobuf::int32 cardindex_;
  ::google::protobuf::int32 checkflag_;
  friend struct protobuf_SaveData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  inline Data* New() const PROTOBUF_FINAL { return New(NULL); }

  Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double photo_info = 3;
  int photo_info_size() const;
  void clear_photo_info();
  static const int kPhotoInfoFieldNumber = 3;
  double photo_info(int index) const;
  void set_photo_info(int index, double value);
  void add_photo_info(double value);
  const ::google::protobuf::RepeatedField< double >&
      photo_info() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_photo_info();

  // repeated .Card CardInfo = 7;
  int cardinfo_size() const;
  void clear_cardinfo();
  static const int kCardInfoFieldNumber = 7;
  const ::Card& cardinfo(int index) const;
  ::Card* mutable_cardinfo(int index);
  ::Card* add_cardinfo();
  ::google::protobuf::RepeatedPtrField< ::Card >*
      mutable_cardinfo();
  const ::google::protobuf::RepeatedPtrField< ::Card >&
      cardinfo() const;

  // required string account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // required string password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string phone_number = 4;
  bool has_phone_number() const;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 4;
  const ::std::string& phone_number() const;
  void set_phone_number(const ::std::string& value);
  #if LANG_CXX11
  void set_phone_number(::std::string&& value);
  #endif
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  ::std::string* mutable_phone_number();
  ::std::string* release_phone_number();
  void set_allocated_phone_number(::std::string* phone_number);

  // optional string email = 5;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 5;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional string Name = 6;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string id = 8;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 8;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:Data)
 private:
  void set_has_account();
  void clear_has_account();
  void set_has_password();
  void clear_has_password();
  void set_has_phone_number();
  void clear_has_phone_number();
  void set_has_email();
  void clear_has_email();
  void set_has_name();
  void clear_has_name();
  void set_has_id();
  void clear_has_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > photo_info_;
  ::google::protobuf::RepeatedPtrField< ::Card > cardinfo_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr phone_number_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend struct protobuf_SaveData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SaveData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SaveData) */ {
 public:
  SaveData();
  virtual ~SaveData();

  SaveData(const SaveData& from);

  inline SaveData& operator=(const SaveData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveData& default_instance();

  static inline const SaveData* internal_default_instance() {
    return reinterpret_cast<const SaveData*>(
               &_SaveData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SaveData* other);

  // implements Message ----------------------------------------------

  inline SaveData* New() const PROTOBUF_FINAL { return New(NULL); }

  SaveData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SaveData& from);
  void MergeFrom(const SaveData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SaveData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Data vector = 1;
  int vector_size() const;
  void clear_vector();
  static const int kVectorFieldNumber = 1;
  const ::Data& vector(int index) const;
  ::Data* mutable_vector(int index);
  ::Data* add_vector();
  ::google::protobuf::RepeatedPtrField< ::Data >*
      mutable_vector();
  const ::google::protobuf::RepeatedPtrField< ::Data >&
      vector() const;

  // @@protoc_insertion_point(class_scope:SaveData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Data > vector_;
  friend struct protobuf_SaveData_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Card

// optional int32 CardID = 1;
inline bool Card::has_cardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Card::set_has_cardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Card::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Card::clear_cardid() {
  cardid_ = 0;
  clear_has_cardid();
}
inline ::google::protobuf::int32 Card::cardid() const {
  // @@protoc_insertion_point(field_get:Card.CardID)
  return cardid_;
}
inline void Card::set_cardid(::google::protobuf::int32 value) {
  set_has_cardid();
  cardid_ = value;
  // @@protoc_insertion_point(field_set:Card.CardID)
}

// optional bytes CardData = 2;
inline bool Card::has_carddata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Card::set_has_carddata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Card::clear_has_carddata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Card::clear_carddata() {
  carddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_carddata();
}
inline const ::std::string& Card::carddata() const {
  // @@protoc_insertion_point(field_get:Card.CardData)
  return carddata_.GetNoArena();
}
inline void Card::set_carddata(const ::std::string& value) {
  set_has_carddata();
  carddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Card.CardData)
}
#if LANG_CXX11
inline void Card::set_carddata(::std::string&& value) {
  set_has_carddata();
  carddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Card.CardData)
}
#endif
inline void Card::set_carddata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_carddata();
  carddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Card.CardData)
}
inline void Card::set_carddata(const void* value, size_t size) {
  set_has_carddata();
  carddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Card.CardData)
}
inline ::std::string* Card::mutable_carddata() {
  set_has_carddata();
  // @@protoc_insertion_point(field_mutable:Card.CardData)
  return carddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_carddata() {
  // @@protoc_insertion_point(field_release:Card.CardData)
  clear_has_carddata();
  return carddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_carddata(::std::string* carddata) {
  if (carddata != NULL) {
    set_has_carddata();
  } else {
    clear_has_carddata();
  }
  carddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), carddata);
  // @@protoc_insertion_point(field_set_allocated:Card.CardData)
}

// repeated string fields = 3;
inline int Card::fields_size() const {
  return fields_.size();
}
inline void Card::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& Card::fields(int index) const {
  // @@protoc_insertion_point(field_get:Card.fields)
  return fields_.Get(index);
}
inline ::std::string* Card::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:Card.fields)
  return fields_.Mutable(index);
}
inline void Card::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Card.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Card::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Card.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Card::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Card.fields)
}
inline void Card::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Card.fields)
}
inline ::std::string* Card::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:Card.fields)
  return fields_.Add();
}
inline void Card::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Card.fields)
}
#if LANG_CXX11
inline void Card::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Card.fields)
}
#endif
inline void Card::add_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Card.fields)
}
inline void Card::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Card.fields)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Card::fields() const {
  // @@protoc_insertion_point(field_list:Card.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Card::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:Card.fields)
  return &fields_;
}

// optional int32 CardIndex = 4;
inline bool Card::has_cardindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Card::set_has_cardindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Card::clear_has_cardindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Card::clear_cardindex() {
  cardindex_ = 0;
  clear_has_cardindex();
}
inline ::google::protobuf::int32 Card::cardindex() const {
  // @@protoc_insertion_point(field_get:Card.CardIndex)
  return cardindex_;
}
inline void Card::set_cardindex(::google::protobuf::int32 value) {
  set_has_cardindex();
  cardindex_ = value;
  // @@protoc_insertion_point(field_set:Card.CardIndex)
}

// optional int32 checkflag = 5;
inline bool Card::has_checkflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Card::set_has_checkflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Card::clear_has_checkflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Card::clear_checkflag() {
  checkflag_ = 0;
  clear_has_checkflag();
}
inline ::google::protobuf::int32 Card::checkflag() const {
  // @@protoc_insertion_point(field_get:Card.checkflag)
  return checkflag_;
}
inline void Card::set_checkflag(::google::protobuf::int32 value) {
  set_has_checkflag();
  checkflag_ = value;
  // @@protoc_insertion_point(field_set:Card.checkflag)
}

// -------------------------------------------------------------------

// Data

// required string account = 1;
inline bool Data::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& Data::account() const {
  // @@protoc_insertion_point(field_get:Data.account)
  return account_.GetNoArena();
}
inline void Data::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Data.account)
}
#if LANG_CXX11
inline void Data::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Data.account)
}
#endif
inline void Data::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Data.account)
}
inline void Data::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Data.account)
}
inline ::std::string* Data::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:Data.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_account() {
  // @@protoc_insertion_point(field_release:Data.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Data.account)
}

// required string password = 2;
inline bool Data::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& Data::password() const {
  // @@protoc_insertion_point(field_get:Data.password)
  return password_.GetNoArena();
}
inline void Data::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Data.password)
}
#if LANG_CXX11
inline void Data::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Data.password)
}
#endif
inline void Data::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Data.password)
}
inline void Data::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Data.password)
}
inline ::std::string* Data::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:Data.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_password() {
  // @@protoc_insertion_point(field_release:Data.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Data.password)
}

// repeated double photo_info = 3;
inline int Data::photo_info_size() const {
  return photo_info_.size();
}
inline void Data::clear_photo_info() {
  photo_info_.Clear();
}
inline double Data::photo_info(int index) const {
  // @@protoc_insertion_point(field_get:Data.photo_info)
  return photo_info_.Get(index);
}
inline void Data::set_photo_info(int index, double value) {
  photo_info_.Set(index, value);
  // @@protoc_insertion_point(field_set:Data.photo_info)
}
inline void Data::add_photo_info(double value) {
  photo_info_.Add(value);
  // @@protoc_insertion_point(field_add:Data.photo_info)
}
inline const ::google::protobuf::RepeatedField< double >&
Data::photo_info() const {
  // @@protoc_insertion_point(field_list:Data.photo_info)
  return photo_info_;
}
inline ::google::protobuf::RepeatedField< double >*
Data::mutable_photo_info() {
  // @@protoc_insertion_point(field_mutable_list:Data.photo_info)
  return &photo_info_;
}

// optional string phone_number = 4;
inline bool Data::has_phone_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Data::set_has_phone_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Data::clear_has_phone_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Data::clear_phone_number() {
  phone_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone_number();
}
inline const ::std::string& Data::phone_number() const {
  // @@protoc_insertion_point(field_get:Data.phone_number)
  return phone_number_.GetNoArena();
}
inline void Data::set_phone_number(const ::std::string& value) {
  set_has_phone_number();
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Data.phone_number)
}
#if LANG_CXX11
inline void Data::set_phone_number(::std::string&& value) {
  set_has_phone_number();
  phone_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Data.phone_number)
}
#endif
inline void Data::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone_number();
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Data.phone_number)
}
inline void Data::set_phone_number(const char* value, size_t size) {
  set_has_phone_number();
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Data.phone_number)
}
inline ::std::string* Data::mutable_phone_number() {
  set_has_phone_number();
  // @@protoc_insertion_point(field_mutable:Data.phone_number)
  return phone_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_phone_number() {
  // @@protoc_insertion_point(field_release:Data.phone_number)
  clear_has_phone_number();
  return phone_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number != NULL) {
    set_has_phone_number();
  } else {
    clear_has_phone_number();
  }
  phone_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_number);
  // @@protoc_insertion_point(field_set_allocated:Data.phone_number)
}

// optional string email = 5;
inline bool Data::has_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Data::set_has_email() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Data::clear_has_email() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Data::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& Data::email() const {
  // @@protoc_insertion_point(field_get:Data.email)
  return email_.GetNoArena();
}
inline void Data::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Data.email)
}
#if LANG_CXX11
inline void Data::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Data.email)
}
#endif
inline void Data::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Data.email)
}
inline void Data::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Data.email)
}
inline ::std::string* Data::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:Data.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_email() {
  // @@protoc_insertion_point(field_release:Data.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:Data.email)
}

// optional string Name = 6;
inline bool Data::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Data::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Data::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Data::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Data::name() const {
  // @@protoc_insertion_point(field_get:Data.Name)
  return name_.GetNoArena();
}
inline void Data::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Data.Name)
}
#if LANG_CXX11
inline void Data::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Data.Name)
}
#endif
inline void Data::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Data.Name)
}
inline void Data::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Data.Name)
}
inline ::std::string* Data::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Data.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_name() {
  // @@protoc_insertion_point(field_release:Data.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Data.Name)
}

// repeated .Card CardInfo = 7;
inline int Data::cardinfo_size() const {
  return cardinfo_.size();
}
inline void Data::clear_cardinfo() {
  cardinfo_.Clear();
}
inline const ::Card& Data::cardinfo(int index) const {
  // @@protoc_insertion_point(field_get:Data.CardInfo)
  return cardinfo_.Get(index);
}
inline ::Card* Data::mutable_cardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Data.CardInfo)
  return cardinfo_.Mutable(index);
}
inline ::Card* Data::add_cardinfo() {
  // @@protoc_insertion_point(field_add:Data.CardInfo)
  return cardinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Card >*
Data::mutable_cardinfo() {
  // @@protoc_insertion_point(field_mutable_list:Data.CardInfo)
  return &cardinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Card >&
Data::cardinfo() const {
  // @@protoc_insertion_point(field_list:Data.CardInfo)
  return cardinfo_;
}

// optional string id = 8;
inline bool Data::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Data::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Data::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Data::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Data::id() const {
  // @@protoc_insertion_point(field_get:Data.id)
  return id_.GetNoArena();
}
inline void Data::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Data.id)
}
#if LANG_CXX11
inline void Data::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Data.id)
}
#endif
inline void Data::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Data.id)
}
inline void Data::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Data.id)
}
inline ::std::string* Data::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Data.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_id() {
  // @@protoc_insertion_point(field_release:Data.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Data.id)
}

// -------------------------------------------------------------------

// SaveData

// repeated .Data vector = 1;
inline int SaveData::vector_size() const {
  return vector_.size();
}
inline void SaveData::clear_vector() {
  vector_.Clear();
}
inline const ::Data& SaveData::vector(int index) const {
  // @@protoc_insertion_point(field_get:SaveData.vector)
  return vector_.Get(index);
}
inline ::Data* SaveData::mutable_vector(int index) {
  // @@protoc_insertion_point(field_mutable:SaveData.vector)
  return vector_.Mutable(index);
}
inline ::Data* SaveData::add_vector() {
  // @@protoc_insertion_point(field_add:SaveData.vector)
  return vector_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Data >*
SaveData::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:SaveData.vector)
  return &vector_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Data >&
SaveData::vector() const {
  // @@protoc_insertion_point(field_list:SaveData.vector)
  return vector_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Card_CardType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Card_CardType>() {
  return ::Card_CardType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SaveData_2eproto__INCLUDED
