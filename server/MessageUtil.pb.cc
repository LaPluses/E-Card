// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageUtil.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageUtil.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class MessageBoxDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MessageBox> {
} _MessageBox_default_instance_;

namespace protobuf_MessageUtil_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBox, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBox, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBox, trans_str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBox, trans_photo_),
  0,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(MessageBox)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MessageBox_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "MessageUtil.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _MessageBox_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MessageBox_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021MessageUtil.proto\"B\n\nMessageBox\022\014\n\004typ"
      "e\030\001 \002(\005\022\021\n\ttrans_str\030\002 \003(\t\022\023\n\013trans_phot"
      "o\030\003 \003(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 87);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageUtil.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_MessageUtil_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageBox::kTypeFieldNumber;
const int MessageBox::kTransStrFieldNumber;
const int MessageBox::kTransPhotoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageBox::MessageBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MessageUtil_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageBox)
}
MessageBox::MessageBox(const MessageBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trans_str_(from.trans_str_),
      trans_photo_(from.trans_photo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:MessageBox)
}

void MessageBox::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
}

MessageBox::~MessageBox() {
  // @@protoc_insertion_point(destructor:MessageBox)
  SharedDtor();
}

void MessageBox::SharedDtor() {
}

void MessageBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageBox::descriptor() {
  protobuf_MessageUtil_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MessageUtil_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MessageBox& MessageBox::default_instance() {
  protobuf_MessageUtil_2eproto::InitDefaults();
  return *internal_default_instance();
}

MessageBox* MessageBox::New(::google::protobuf::Arena* arena) const {
  MessageBox* n = new MessageBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageBox::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageBox)
  trans_str_.Clear();
  trans_photo_.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MessageBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string trans_str = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_trans_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trans_str(this->trans_str_size() - 1).data(),
            this->trans_str(this->trans_str_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MessageBox.trans_str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double trans_photo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25u, input, this->mutable_trans_photo())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_trans_photo())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageBox)
  return false;
#undef DO_
}

void MessageBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated string trans_str = 2;
  for (int i = 0, n = this->trans_str_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_str(i).data(), this->trans_str(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MessageBox.trans_str");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->trans_str(i), output);
  }

  // repeated double trans_photo = 3;
  for (int i = 0, n = this->trans_photo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->trans_photo(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageBox)
}

::google::protobuf::uint8* MessageBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated string trans_str = 2;
  for (int i = 0, n = this->trans_str_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_str(i).data(), this->trans_str(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MessageBox.trans_str");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->trans_str(i), target);
  }

  // repeated double trans_photo = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(3, this->trans_photo_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageBox)
  return target;
}

size_t MessageBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }
  // repeated string trans_str = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->trans_str_size());
  for (int i = 0, n = this->trans_str_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->trans_str(i));
  }

  // repeated double trans_photo = 3;
  {
    unsigned int count = this->trans_photo_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->trans_photo_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MessageBox)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MessageBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MessageBox)
    MergeFrom(*source);
  }
}

void MessageBox::MergeFrom(const MessageBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trans_str_.MergeFrom(from.trans_str_);
  trans_photo_.MergeFrom(from.trans_photo_);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void MessageBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MessageBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageBox::CopyFrom(const MessageBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MessageBox::Swap(MessageBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageBox::InternalSwap(MessageBox* other) {
  trans_str_.InternalSwap(&other->trans_str_);
  trans_photo_.InternalSwap(&other->trans_photo_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageBox::GetMetadata() const {
  protobuf_MessageUtil_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MessageUtil_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageBox

// required int32 type = 1;
bool MessageBox::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageBox::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageBox::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageBox::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 MessageBox::type() const {
  // @@protoc_insertion_point(field_get:MessageBox.type)
  return type_;
}
void MessageBox::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:MessageBox.type)
}

// repeated string trans_str = 2;
int MessageBox::trans_str_size() const {
  return trans_str_.size();
}
void MessageBox::clear_trans_str() {
  trans_str_.Clear();
}
const ::std::string& MessageBox::trans_str(int index) const {
  // @@protoc_insertion_point(field_get:MessageBox.trans_str)
  return trans_str_.Get(index);
}
::std::string* MessageBox::mutable_trans_str(int index) {
  // @@protoc_insertion_point(field_mutable:MessageBox.trans_str)
  return trans_str_.Mutable(index);
}
void MessageBox::set_trans_str(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MessageBox.trans_str)
  trans_str_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void MessageBox::set_trans_str(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:MessageBox.trans_str)
  trans_str_.Mutable(index)->assign(std::move(value));
}
#endif
void MessageBox::set_trans_str(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  trans_str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageBox.trans_str)
}
void MessageBox::set_trans_str(int index, const char* value, size_t size) {
  trans_str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageBox.trans_str)
}
::std::string* MessageBox::add_trans_str() {
  // @@protoc_insertion_point(field_add_mutable:MessageBox.trans_str)
  return trans_str_.Add();
}
void MessageBox::add_trans_str(const ::std::string& value) {
  trans_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MessageBox.trans_str)
}
#if LANG_CXX11
void MessageBox::add_trans_str(::std::string&& value) {
  trans_str_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MessageBox.trans_str)
}
#endif
void MessageBox::add_trans_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  trans_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MessageBox.trans_str)
}
void MessageBox::add_trans_str(const char* value, size_t size) {
  trans_str_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MessageBox.trans_str)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageBox::trans_str() const {
  // @@protoc_insertion_point(field_list:MessageBox.trans_str)
  return trans_str_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MessageBox::mutable_trans_str() {
  // @@protoc_insertion_point(field_mutable_list:MessageBox.trans_str)
  return &trans_str_;
}

// repeated double trans_photo = 3;
int MessageBox::trans_photo_size() const {
  return trans_photo_.size();
}
void MessageBox::clear_trans_photo() {
  trans_photo_.Clear();
}
double MessageBox::trans_photo(int index) const {
  // @@protoc_insertion_point(field_get:MessageBox.trans_photo)
  return trans_photo_.Get(index);
}
void MessageBox::set_trans_photo(int index, double value) {
  trans_photo_.Set(index, value);
  // @@protoc_insertion_point(field_set:MessageBox.trans_photo)
}
void MessageBox::add_trans_photo(double value) {
  trans_photo_.Add(value);
  // @@protoc_insertion_point(field_add:MessageBox.trans_photo)
}
const ::google::protobuf::RepeatedField< double >&
MessageBox::trans_photo() const {
  // @@protoc_insertion_point(field_list:MessageBox.trans_photo)
  return trans_photo_;
}
::google::protobuf::RepeatedField< double >*
MessageBox::mutable_trans_photo() {
  // @@protoc_insertion_point(field_mutable_list:MessageBox.trans_photo)
  return &trans_photo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
