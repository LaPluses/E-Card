// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cards.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Cards.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ECarD {
class CardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Card> {
} _Card_default_instance_;
class CardsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Cards> {
} _Cards_default_instance_;

namespace protobuf_Cards_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, cardid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, cardtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, checkflag_),
  1,
  3,
  ~0u,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, cards_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(Card)},
  { 15, 21, sizeof(Cards)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Card_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Cards_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Cards.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _Card_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Cards_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Card_default_instance_.DefaultConstruct();
  _Cards_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013Cards.proto\022\005ECarD\"k\n\004Card\022\016\n\006cardID\030\001"
      " \001(\005\022!\n\010cardType\030\002 \002(\0162\017.ECarD.CardType\022"
      "\016\n\006fields\030\003 \003(\t\022\r\n\005image\030\004 \002(\014\022\021\n\tcheckf"
      "lag\030\005 \001(\005\"#\n\005Cards\022\032\n\005cards\030\001 \003(\0132\013.ECar"
      "D.Card*a\n\010CardType\022\n\n\006IDCard\020\001\022\016\n\nDriver"
      "Card\020\002\022\017\n\013StudentCard\020\003\022\026\n\022SocialSecurit"
      "yCard\020\004\022\020\n\014DisabledCard\020\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Cards.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Cards_2eproto

const ::google::protobuf::EnumDescriptor* CardType_descriptor() {
  protobuf_Cards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Cards_2eproto::file_level_enum_descriptors[0];
}
bool CardType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Card::kCardIDFieldNumber;
const int Card::kCardTypeFieldNumber;
const int Card::kFieldsFieldNumber;
const int Card::kImageFieldNumber;
const int Card::kCheckflagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Card::Card()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Cards_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ECarD.Card)
}
Card::Card(const Card& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  ::memcpy(&cardid_, &from.cardid_,
    reinterpret_cast<char*>(&cardtype_) -
    reinterpret_cast<char*>(&cardid_) + sizeof(cardtype_));
  // @@protoc_insertion_point(copy_constructor:ECarD.Card)
}

void Card::SharedCtor() {
  _cached_size_ = 0;
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cardid_, 0, reinterpret_cast<char*>(&checkflag_) -
    reinterpret_cast<char*>(&cardid_) + sizeof(checkflag_));
  cardtype_ = 1;
}

Card::~Card() {
  // @@protoc_insertion_point(destructor:ECarD.Card)
  SharedDtor();
}

void Card::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Card::descriptor() {
  protobuf_Cards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Cards_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Card& Card::default_instance() {
  protobuf_Cards_2eproto::InitDefaults();
  return *internal_default_instance();
}

Card* Card::New(::google::protobuf::Arena* arena) const {
  Card* n = new Card;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Card::Clear() {
// @@protoc_insertion_point(message_clear_start:ECarD.Card)
  fields_.Clear();
  if (has_image()) {
    GOOGLE_DCHECK(!image_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*image_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&cardid_, 0, reinterpret_cast<char*>(&checkflag_) -
      reinterpret_cast<char*>(&cardid_) + sizeof(checkflag_));
    cardtype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ECarD.Card)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cardID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cardid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ECarD.CardType cardType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ECarD::CardType_IsValid(value)) {
            set_cardtype(static_cast< ::ECarD::CardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fields(this->fields_size() - 1).data(),
            this->fields(this->fields_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ECarD.Card.fields");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes image = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checkflag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_checkflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ECarD.Card)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ECarD.Card)
  return false;
#undef DO_
}

void Card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ECarD.Card)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cardID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cardid(), output);
  }

  // required .ECarD.CardType cardType = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cardtype(), output);
  }

  // repeated string fields = 3;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fields(i).data(), this->fields(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ECarD.Card.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fields(i), output);
  }

  // required bytes image = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->image(), output);
  }

  // optional int32 checkflag = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->checkflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ECarD.Card)
}

::google::protobuf::uint8* Card::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECarD.Card)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cardID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cardid(), target);
  }

  // required .ECarD.CardType cardType = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cardtype(), target);
  }

  // repeated string fields = 3;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fields(i).data(), this->fields(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ECarD.Card.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->fields(i), target);
  }

  // required bytes image = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->image(), target);
  }

  // optional int32 checkflag = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->checkflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECarD.Card)
  return target;
}

size_t Card::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ECarD.Card)
  size_t total_size = 0;

  if (has_image()) {
    // required bytes image = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());
  }

  if (has_cardtype()) {
    // required .ECarD.CardType cardType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cardtype());
  }

  return total_size;
}
size_t Card::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECarD.Card)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required bytes image = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());

    // required .ECarD.CardType cardType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cardtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string fields = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional int32 cardID = 1;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardid());
    }

    // optional int32 checkflag = 5;
    if (has_checkflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkflag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Card::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ECarD.Card)
  GOOGLE_DCHECK_NE(&from, this);
  const Card* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Card>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ECarD.Card)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ECarD.Card)
    MergeFrom(*source);
  }
}

void Card::MergeFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECarD.Card)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_image();
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000002u) {
      cardid_ = from.cardid_;
    }
    if (cached_has_bits & 0x00000004u) {
      checkflag_ = from.checkflag_;
    }
    if (cached_has_bits & 0x00000008u) {
      cardtype_ = from.cardtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Card::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ECarD.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Card::CopyFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECarD.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  return true;
}

void Card::Swap(Card* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Card::InternalSwap(Card* other) {
  fields_.InternalSwap(&other->fields_);
  image_.Swap(&other->image_);
  std::swap(cardid_, other->cardid_);
  std::swap(checkflag_, other->checkflag_);
  std::swap(cardtype_, other->cardtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Card::GetMetadata() const {
  protobuf_Cards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Cards_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Card

// optional int32 cardID = 1;
bool Card::has_cardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Card::set_has_cardid() {
  _has_bits_[0] |= 0x00000002u;
}
void Card::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Card::clear_cardid() {
  cardid_ = 0;
  clear_has_cardid();
}
::google::protobuf::int32 Card::cardid() const {
  // @@protoc_insertion_point(field_get:ECarD.Card.cardID)
  return cardid_;
}
void Card::set_cardid(::google::protobuf::int32 value) {
  set_has_cardid();
  cardid_ = value;
  // @@protoc_insertion_point(field_set:ECarD.Card.cardID)
}

// required .ECarD.CardType cardType = 2;
bool Card::has_cardtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Card::set_has_cardtype() {
  _has_bits_[0] |= 0x00000008u;
}
void Card::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000008u;
}
void Card::clear_cardtype() {
  cardtype_ = 1;
  clear_has_cardtype();
}
::ECarD::CardType Card::cardtype() const {
  // @@protoc_insertion_point(field_get:ECarD.Card.cardType)
  return static_cast< ::ECarD::CardType >(cardtype_);
}
void Card::set_cardtype(::ECarD::CardType value) {
  assert(::ECarD::CardType_IsValid(value));
  set_has_cardtype();
  cardtype_ = value;
  // @@protoc_insertion_point(field_set:ECarD.Card.cardType)
}

// repeated string fields = 3;
int Card::fields_size() const {
  return fields_.size();
}
void Card::clear_fields() {
  fields_.Clear();
}
const ::std::string& Card::fields(int index) const {
  // @@protoc_insertion_point(field_get:ECarD.Card.fields)
  return fields_.Get(index);
}
::std::string* Card::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:ECarD.Card.fields)
  return fields_.Mutable(index);
}
void Card::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ECarD.Card.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Card::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ECarD.Card.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
void Card::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ECarD.Card.fields)
}
void Card::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ECarD.Card.fields)
}
::std::string* Card::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:ECarD.Card.fields)
  return fields_.Add();
}
void Card::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ECarD.Card.fields)
}
#if LANG_CXX11
void Card::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ECarD.Card.fields)
}
#endif
void Card::add_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ECarD.Card.fields)
}
void Card::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ECarD.Card.fields)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Card::fields() const {
  // @@protoc_insertion_point(field_list:ECarD.Card.fields)
  return fields_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Card::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:ECarD.Card.fields)
  return &fields_;
}

// required bytes image = 4;
bool Card::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Card::set_has_image() {
  _has_bits_[0] |= 0x00000001u;
}
void Card::clear_has_image() {
  _has_bits_[0] &= ~0x00000001u;
}
void Card::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image();
}
const ::std::string& Card::image() const {
  // @@protoc_insertion_point(field_get:ECarD.Card.image)
  return image_.GetNoArena();
}
void Card::set_image(const ::std::string& value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ECarD.Card.image)
}
#if LANG_CXX11
void Card::set_image(::std::string&& value) {
  set_has_image();
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ECarD.Card.image)
}
#endif
void Card::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ECarD.Card.image)
}
void Card::set_image(const void* value, size_t size) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ECarD.Card.image)
}
::std::string* Card::mutable_image() {
  set_has_image();
  // @@protoc_insertion_point(field_mutable:ECarD.Card.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Card::release_image() {
  // @@protoc_insertion_point(field_release:ECarD.Card.image)
  clear_has_image();
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Card::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    set_has_image();
  } else {
    clear_has_image();
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:ECarD.Card.image)
}

// optional int32 checkflag = 5;
bool Card::has_checkflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Card::set_has_checkflag() {
  _has_bits_[0] |= 0x00000004u;
}
void Card::clear_has_checkflag() {
  _has_bits_[0] &= ~0x00000004u;
}
void Card::clear_checkflag() {
  checkflag_ = 0;
  clear_has_checkflag();
}
::google::protobuf::int32 Card::checkflag() const {
  // @@protoc_insertion_point(field_get:ECarD.Card.checkflag)
  return checkflag_;
}
void Card::set_checkflag(::google::protobuf::int32 value) {
  set_has_checkflag();
  checkflag_ = value;
  // @@protoc_insertion_point(field_set:ECarD.Card.checkflag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cards::kCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cards::Cards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Cards_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ECarD.Cards)
}
Cards::Cards(const Cards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ECarD.Cards)
}

void Cards::SharedCtor() {
  _cached_size_ = 0;
}

Cards::~Cards() {
  // @@protoc_insertion_point(destructor:ECarD.Cards)
  SharedDtor();
}

void Cards::SharedDtor() {
}

void Cards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cards::descriptor() {
  protobuf_Cards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Cards_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cards& Cards::default_instance() {
  protobuf_Cards_2eproto::InitDefaults();
  return *internal_default_instance();
}

Cards* Cards::New(::google::protobuf::Arena* arena) const {
  Cards* n = new Cards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cards::Clear() {
// @@protoc_insertion_point(message_clear_start:ECarD.Cards)
  cards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Cards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ECarD.Cards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ECarD.Card cards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ECarD.Cards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ECarD.Cards)
  return false;
#undef DO_
}

void Cards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ECarD.Cards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ECarD.Card cards = 1;
  for (unsigned int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ECarD.Cards)
}

::google::protobuf::uint8* Cards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ECarD.Cards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ECarD.Card cards = 1;
  for (unsigned int i = 0, n = this->cards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->cards(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ECarD.Cards)
  return target;
}

size_t Cards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ECarD.Cards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .ECarD.Card cards = 1;
  {
    unsigned int count = this->cards_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ECarD.Cards)
  GOOGLE_DCHECK_NE(&from, this);
  const Cards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ECarD.Cards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ECarD.Cards)
    MergeFrom(*source);
  }
}

void Cards::MergeFrom(const Cards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ECarD.Cards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
}

void Cards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ECarD.Cards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cards::CopyFrom(const Cards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ECarD.Cards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cards::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->cards())) return false;
  return true;
}

void Cards::Swap(Cards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cards::InternalSwap(Cards* other) {
  cards_.InternalSwap(&other->cards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cards::GetMetadata() const {
  protobuf_Cards_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Cards_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cards

// repeated .ECarD.Card cards = 1;
int Cards::cards_size() const {
  return cards_.size();
}
void Cards::clear_cards() {
  cards_.Clear();
}
const ::ECarD::Card& Cards::cards(int index) const {
  // @@protoc_insertion_point(field_get:ECarD.Cards.cards)
  return cards_.Get(index);
}
::ECarD::Card* Cards::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:ECarD.Cards.cards)
  return cards_.Mutable(index);
}
::ECarD::Card* Cards::add_cards() {
  // @@protoc_insertion_point(field_add:ECarD.Cards.cards)
  return cards_.Add();
}
::google::protobuf::RepeatedPtrField< ::ECarD::Card >*
Cards::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:ECarD.Cards.cards)
  return &cards_;
}
const ::google::protobuf::RepeatedPtrField< ::ECarD::Card >&
Cards::cards() const {
  // @@protoc_insertion_point(field_list:ECarD.Cards.cards)
  return cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ECarD

// @@protoc_insertion_point(global_scope)
